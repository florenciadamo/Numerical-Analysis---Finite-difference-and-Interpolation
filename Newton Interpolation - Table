rm(list=ls())
#Ejercicio a
# 1) Cargo la funcion ----
InterpolacionNewton_3.2 <- function(x_i, f_i) {
  
  n <- length(x_i)
  q <- matrix(data = NA, n, n)
  q[,1] <- f_i
  
  #Paso 1
  
  for (i in 2:n) {
    for (j in i:n) {
      q[j,i] <- (q[j,i-1] - q[j-1,i-1]) / (x_i[j] - x_i[j-i+1])
    }
  }
  
#Paso 2
  
  
  return(q)
}
# 2) Cargo los datos ----
x_i<-c(0,0.25,0.5,0.75)
f_i<-c(1,1.64872,2.71828,4.48169)
# 3) Interpolacion de Newton ----

InterpolacionNewton_3.2(x_i,f_i)
# 4) Escribe el Polinomio ----
#Polinomio:
#cambiar el numero de F[]por la cantidad del triangulo
p <- InterpolacionNewton_3.2(x_i,f_i)
p<- c(p[1,1],p[2,2],p[3,3],p[4,4])

r <- as.character(round(p[1], 4))
ri <- ''
#cambiar el intervalo de 2:"". Va la cantidad de columnas del triangulo
for (i in 2:4) {
  ri <- paste(ri, '*(x - ', x_i[i-1], ')', sep = '', collapse = '')
  
  r <- paste(r, ' + ', round(p[i], 4), ri, sep = '', collapse = '')
}
r <- paste('p(x)=',r)
r


